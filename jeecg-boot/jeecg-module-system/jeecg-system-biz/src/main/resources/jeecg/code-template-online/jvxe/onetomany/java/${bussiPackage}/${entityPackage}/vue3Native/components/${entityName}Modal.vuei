<#include "/common/utils.ftl">
<template>
<#assign buttonList=[]>
<#if tableVo.extendParams?? && tableVo.extendParams.cgButtonList??>
  <#assign buttonList = tableVo.extendParams.cgButtonList?filter(btn -> btn??)>
</#if>
  <BasicModal v-bind="$attrs" @register="registerModal" :title="title" maxHeight="500px" :width="${getModalWidth(tableVo.fieldRowNum?default(1))}" @ok="handleSubmit">
    <${Format.humpToShortbar(entityName)}-form ref="formComponent" :formDisabled="formDisabled" :formBpm="false" @success="submitSuccess"></${Format.humpToShortbar(entityName)}-form>
<#if buttonList?? && buttonList?size gt 0>
   <template #insertFooter>
    <#list buttonList as btn>
     <#if btn.buttonStyle=='form'>
       <a-button type="primary" @click="handle${btn.buttonCode?cap_first}" <#if btn.buttonIcon??> preIcon="${btn.buttonIcon}" </#if>>${btn.buttonName}</a-button>
     </#if>
    </#list>
   </template>
</#if>
  </BasicModal>
</template>

<script lang="ts">
  import { ref, unref } from 'vue';
  import { BasicModal, useModalInner } from '/@/components/Modal';
  import ${entityName}Form from './${entityName}Form.vue';
  import { useMessage } from '/@/hooks/web/useMessage';
  const { createMessage } = useMessage();
  export default {
    name: "TestCgMainVxeModal",
    components:{
      BasicModal,
      ${entityName}Form
    },
    emits:['register','success'],
    setup(_p, {emit}){
      const formComponent = ref()
      const isUpdate = ref(true);
      const formDisabled = ref(false);
      const title = ref('')

      //表单赋值
      const [registerModal, {setModalProps, closeModal}] = useModalInner(async (data) => {
        setModalProps({confirmLoading: false,showCancelBtn:data?.showFooter,showOkBtn:data?.showFooter});
        isUpdate.value = !!data?.isUpdate;
        formDisabled.value = !data?.showFooter;
        title.value = data?.isUpdate ? (unref(formDisabled) ? '详情' : '编辑') : '新增';
        if (unref(isUpdate)) {
          formComponent.value.edit(data.record)
        }else{
          formComponent.value.add()
        }
      });

      function handleSubmit() {
        formComponent.value.submitForm();
      }

      function submitSuccess(){
        emit('success');
        closeModal();
      }
<#if buttonList?size gt 0>
  <#list buttonList?filter(it -> it.orderNum?? && it.orderNum != null)?sort_by("orderNum") as btn>
      <#if btn.buttonStyle=='form'>
         function handle${btn.buttonCode?cap_first}(){
            createMessage.info('点击了${btn.buttonName}按钮，对应的业务逻辑需自行实现!');
         }
      </#if>
  </#list>
</#if>
      return {
        registerModal,
        title,
        formComponent,
        formDisabled,
        handleSubmit,
        submitSuccess,
<#if buttonList?size gt 0>
  <#list buttonList?filter(it -> it.orderNum?? && it.orderNum != null)?sort_by("orderNum") as btn>
      <#if btn.buttonStyle=='form'>
        handle${btn.buttonCode?cap_first},
      </#if>
  </#list>
</#if>
      }
    }
  }
</script>
<style lang="less" scoped>
	/** 时间和数字输入框样式 */
  :deep(.ant-input-number) {
    width: 100%;
  }

  :deep(.ant-calendar-picker) {
    width: 100%;
  }
</style>