package ${bussiPackage}.${entityPackage}.controller;

import java.io.UnsupportedEncodingException;
import java.io.IOException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.shiro.SecurityUtils;
import org.jeecgframework.poi.excel.ExcelImportUtil;
import org.jeecgframework.poi.excel.def.NormalExcelConstants;
import org.jeecgframework.poi.excel.entity.ExportParams;
import org.jeecgframework.poi.excel.entity.ImportParams;
import org.jeecgframework.poi.excel.view.JeecgEntityExcelView;
import org.jeecg.common.system.vo.LoginUser;
import org.jeecg.common.api.vo.Result;
import org.jeecg.common.system.query.QueryGenerator;
import org.jeecg.common.util.oConvertUtils;
<#list subTables as sub>
import ${bussiPackage}.${entityPackage}.entity.${sub.entityName};
</#list>
import ${bussiPackage}.${entityPackage}.entity.${entityName};
import ${bussiPackage}.${entityPackage}.vo.${entityName}Page;
import ${bussiPackage}.${entityPackage}.service.I${entityName}Service;
<#list subTables as sub>
import ${bussiPackage}.${entityPackage}.service.I${sub.entityName}Service;
</#list>
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import lombok.extern.slf4j.Slf4j;
import com.alibaba.fastjson.JSON;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jeecg.common.aspect.annotation.AutoLog;

 /**
 * @Description: ${tableVo.ftlDescription}
 * @Author: jeecg-boot
 * @Date:   ${.now?string["yyyy-MM-dd"]}
 * @Version: V1.0
 */
@Tag(name="${tableVo.ftlDescription}")
@RestController
@RequestMapping("/${entityPackage}/${entityName?uncap_first}")
@Slf4j
public class ${entityName}Controller {
	@Autowired
	private I${entityName}Service ${entityName?uncap_first}Service;
	<#list subTables as sub>
	@Autowired
	private I${sub.entityName}Service ${sub.entityName?uncap_first}Service;
	</#list>
	
	/**
	 * 分页列表查询
	 *
	 * @param ${entityName?uncap_first}
	 * @param pageNo
	 * @param pageSize
	 * @param req
	 * @return
	 */
	@AutoLog(value = "${tableVo.ftlDescription}-分页列表查询")
	@Operation(summary="${tableVo.ftlDescription}-分页列表查询")
	@GetMapping(value = "/list")
	public Result<?> queryPageList(${entityName} ${entityName?uncap_first},
								   @RequestParam(name="pageNo", defaultValue="1") Integer pageNo,
								   @RequestParam(name="pageSize", defaultValue="10") Integer pageSize,
								   HttpServletRequest req) {
		QueryWrapper<${entityName}> queryWrapper = QueryGenerator.initQueryWrapper(${entityName?uncap_first}, req.getParameterMap());
		Page<${entityName}> page = new Page<${entityName}>(pageNo, pageSize);
		IPage<${entityName}> pageList = ${entityName?uncap_first}Service.page(page, queryWrapper);
		return Result.OK(pageList);
	}
	
	/**
	 *   添加
	 *
	 * @param ${entityName?uncap_first}Page
	 * @return
	 */
	@AutoLog(value = "${tableVo.ftlDescription}-添加")
	@Operation(summary="${tableVo.ftlDescription}-添加")
	@PostMapping(value = "/add")
	public Result<?> add(@RequestBody ${entityName}Page ${entityName?uncap_first}Page) {
       ${entityName} ${entityName?uncap_first} = new ${entityName}();
		BeanUtils.copyProperties(${entityName?uncap_first}Page, ${entityName?uncap_first});
		${entityName?uncap_first}Service.save(${entityName?uncap_first});
		return Result.OK("添加成功！");
	}
	
	/**
	 *  编辑
	 *
	 * @param ${entityName?uncap_first}Page
	 * @return
	 */
	@AutoLog(value = "${tableVo.ftlDescription}-编辑")
	@Operation(summary="${tableVo.ftlDescription}-编辑")
	@RequestMapping(value = "/edit", method = {RequestMethod.PUT,RequestMethod.POST})
	public Result<?> edit(@RequestBody ${entityName}Page ${entityName?uncap_first}Page) {
		${entityName} ${entityName?uncap_first} = new ${entityName}();
		BeanUtils.copyProperties(${entityName?uncap_first}Page, ${entityName?uncap_first});
		${entityName?uncap_first}Service.updateById(${entityName?uncap_first});
		return Result.OK("编辑成功!");
	}
	
	/**
	 *   通过id删除
	 *
	 * @param id
	 * @return
	 */
	@AutoLog(value = "${tableVo.ftlDescription}-通过id删除")
	@Operation(summary="${tableVo.ftlDescription}-通过id删除")
	@DeleteMapping(value = "/delete")
	public Result<?> delete(@RequestParam(name="id",required=true) String id) {
		${entityName?uncap_first}Service.delMain(id);
		return Result.OK("删除成功!");
	}
	
	/**
	 *  批量删除
	 *
	 * @param ids
	 * @return
	 */
	@AutoLog(value = "${tableVo.ftlDescription}-批量删除")
	@Operation(summary="${tableVo.ftlDescription}-批量删除")
	@DeleteMapping(value = "/deleteBatch")
	public Result<?> deleteBatch(@RequestParam(name="ids",required=true) String ids) {
	    this.${entityName?uncap_first}Service.removeByIds(Arrays.asList(ids.split(",")));
		return Result.OK("批量删除成功！");
	}
	
	/**
	 * 通过id查询
	 *
	 * @param id
	 * @return
	 */
	@AutoLog(value = "${tableVo.ftlDescription}-通过id查询")
	@Operation(summary="${tableVo.ftlDescription}-通过id查询")
	@GetMapping(value = "/queryById")
	public Result<?> queryById(@RequestParam(name="id",required=true) String id) {
		${entityName} ${entityName?uncap_first} = ${entityName?uncap_first}Service.getById(id);
		return Result.OK(${entityName?uncap_first});
	}
	
	//===========================以下是子表信息操作相关API====================================
	
	<#list subTables as sub>
	/**
	 * 通过主表id查询${sub.ftlDescription}
	 *
  	 * @param ${sub.entityName?uncap_first}
	 * @return
	 */
	@AutoLog(value = "${sub.ftlDescription}-通过主表id查询")
	@Operation(summary="${sub.ftlDescription}-通过主表id查询")
	 <#--  update-begin--Author:kangxiaolin  Date:20190905 for：[442]主子表分开维护，生成的代码子表的分页改为真实的分页--------------------          	 -->
	@GetMapping(value = "/list${sub.entityName}ByMainId")
	public Result<?> list${sub.entityName}ByMainId(${sub.entityName} ${sub.entityName?uncap_first},
                								  @RequestParam(name="pageNo", defaultValue="1") Integer pageNo,
                								  @RequestParam(name="pageSize", defaultValue="10") Integer pageSize,
                								  HttpServletRequest req) {
        if(<#list sub.foreignKeys as key><#rt/>
                <#if key?lower_case?index_of("${primaryKeyField}")!=-1><#rt/>
                     <#if key_index == 0><#rt/>
${sub.entityName?uncap_first}.get${key?cap_first}()!=null<#rt/>
                     <#else><#rt/>
|| ${sub.entityName?uncap_first}.get${key?cap_first}()!=null<#rt/>
                     </#if><#rt/>
                 <#else><#rt/>
                   <#if key_index == 0><#rt/>
${sub.entityName?uncap_first}.get${key}()!=null<#rt/>
                     <#else><#rt/>
|| ${sub.entityName?uncap_first}.get${key}()!=null<#rt/>
                   </#if><#rt/>
                </#if>
         </#list><#rt/>
) {
            QueryWrapper<${sub.entityName}> queryWrapper = QueryGenerator.initQueryWrapper(${sub.entityName?uncap_first}, req.getParameterMap());
            Page<${sub.entityName}> page = new Page<${sub.entityName}>(pageNo, pageSize);
            IPage<${sub.entityName}> pageList =  ${sub.entityName?uncap_first}Service.page(page, queryWrapper);
            return Result.OK(pageList);
        }else{
            return Result.OK();
        }
    }
    <#--   update-end--Author:kangxiaolin  Date:20190905 for：[442]主子表分开维护，生成的代码子表的分页改为真实的分页--------------------          	 -->
	
	/**
     * 添加${sub.ftlDescription}
     *
     * @param ${sub.entityName?uncap_first}
     * @return
     */
    @AutoLog(value = "${sub.ftlDescription}-添加")
    @Operation(summary="${sub.ftlDescription}-添加")
    @PostMapping(value = "/add${sub.entityName}")
    public Result<?> add${sub.entityName}(@RequestBody ${sub.entityName} ${sub.entityName?uncap_first}) {
        ${sub.entityName?uncap_first}Service.save(${sub.entityName?uncap_first});
        return Result.OK("添加${sub.ftlDescription}成功！");
    }
    
    /**
     * 编辑${sub.ftlDescription}
     *
     * @param ${sub.entityName?uncap_first}
     * @return
     */
    @AutoLog(value = "${sub.ftlDescription}-编辑")
    @Operation(summary="${sub.ftlDescription}-编辑")
    @RequestMapping(value = "/edit${sub.entityName}", method = {RequestMethod.PUT,RequestMethod.POST})
    public Result<?> edit${sub.entityName}(@RequestBody ${sub.entityName} ${sub.entityName?uncap_first}) {
        ${sub.entityName?uncap_first}Service.updateById(${sub.entityName?uncap_first});
        return Result.OK("编辑${sub.ftlDescription}成功！");
    }
    
    /**
     * 通过id删除${sub.ftlDescription}
     *
     * @param id
     * @return
     */
    @AutoLog(value = "${sub.ftlDescription}-通过id删除")
    @Operation(summary="${sub.ftlDescription}-通过id删除")
    @DeleteMapping(value = "/delete${sub.entityName}")
    public Result<?> delete${sub.entityName}(@RequestParam(name = "id", required = true) String id) {
       ${sub.entityName?uncap_first}Service.removeById(id);
        return Result.OK("删除${sub.ftlDescription}成功！");
    }
	
	/**
     * 批量删除${sub.ftlDescription}
     *
     * @param ids
     * @return
     */
    @AutoLog(value = "${sub.ftlDescription}-批量删除")
    @Operation(summary="${sub.ftlDescription}-批量删除")
    @DeleteMapping(value = "/deleteBatch${sub.entityName}")
    public Result<?> deleteBatch${sub.entityName}(@RequestParam(name = "ids", required = true) String ids) {
        if (ids == null || "".equals(ids.trim())) {
            return Result.error("参数不识别！");
        } 
        this.${sub.entityName?uncap_first}Service.removeByIds(Arrays.asList(ids.split(",")));
       	return Result.OK("批量删除成功！");

    }
    
	</#list>

    /**
    * 导出excel
    *
    * @param request
    * @param ${entityName?uncap_first}
    */
    @RequestMapping(value = "/exportXls")
    public ModelAndView exportXls(HttpServletRequest request, ${entityName} ${entityName?uncap_first}) {
      // Step.1 组装查询条件
      QueryWrapper<${entityName}> queryWrapper = QueryGenerator.initQueryWrapper(${entityName?uncap_first}, request.getParameterMap());
      LoginUser sysUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();

      //Step.2 获取导出数据
      List<${entityName}Page> pageList = new ArrayList<${entityName}Page>();
      List<${entityName}> ${entityName?uncap_first}List = ${entityName?uncap_first}Service.list(queryWrapper);
      for (${entityName} temp : ${entityName?uncap_first}List) {
          ${entityName}Page vo = new ${entityName}Page();
          BeanUtils.copyProperties(temp, vo);
          <#list subTables as sub>
          List<${sub.entityName}> ${sub.entityName?uncap_first}List = ${sub.entityName?uncap_first}Service.selectByMainId(temp.getId());
          vo.set${sub.entityName}List(${sub.entityName?uncap_first}List);
          </#list>
          pageList.add(vo);
      }
      //Step.3 调用AutoPoi导出Excel
      ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());
      mv.addObject(NormalExcelConstants.FILE_NAME, "${tableVo.ftlDescription}");
      mv.addObject(NormalExcelConstants.CLASS, ${entityName}Page.class);
      mv.addObject(NormalExcelConstants.PARAMS, new ExportParams("${tableVo.ftlDescription}数据", "导出人:"+sysUser.getRealname(), "${tableVo.ftlDescription}"));
      mv.addObject(NormalExcelConstants.DATA_LIST, pageList);
      return mv;
    }

    /**
    * 通过excel导入数据
    *
    * @param request
    * @param response
    * @return
    */
    @RequestMapping(value = "/importExcel", method = RequestMethod.POST)
    public Result<?> importExcel(HttpServletRequest request, HttpServletResponse response) {
      MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
      Map<String, MultipartFile> fileMap = multipartRequest.getFileMap();
      for (Map.Entry<String, MultipartFile> entity : fileMap.entrySet()) {
          MultipartFile file = entity.getValue();// 获取上传文件对象
          ImportParams params = new ImportParams();
          params.setTitleRows(2);
          params.setHeadRows(1);
          params.setNeedSave(true);
          try {
              List<${entityName}Page> list = ExcelImportUtil.importExcel(file.getInputStream(), ${entityName}Page.class, params);
              for (${entityName}Page page : list) {
                  ${entityName} po = new ${entityName}();
                  BeanUtils.copyProperties(page, po);
                  ${entityName?uncap_first}Service.saveMain(po, <#list subTables as sub>page.get${sub.entityName}List()<#if sub_has_next>,</#if></#list>);
              }
              return Result.OK("文件导入成功！数据行数:" + list.size());
          } catch (Exception e) {
              log.error(e.getMessage(),e);
              return Result.error("文件导入失败:"+e.getMessage());
          } finally {
              try {
                  file.getInputStream().close();
              } catch (IOException e) {
                  e.printStackTrace();
              }
          }
      }
      return Result.OK("文件导入失败！");
    }
}
