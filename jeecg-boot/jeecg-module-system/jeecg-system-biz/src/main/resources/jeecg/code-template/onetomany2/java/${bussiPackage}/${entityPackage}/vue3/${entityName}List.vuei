<template>
   <div>
    <!--引用表格-->
   <BasicTable @register="registerTable" :rowSelection="rowSelection">
     <!--插槽:table标题-->
      <template #tableTitle>
          <a-button type="primary" @click="handleAdd" preIcon="ant-design:plus-outlined"> 新增</a-button>
          <a-button  type="primary" preIcon="ant-design:export-outlined" @click="onExportXls"> 导出</a-button>
          <j-upload-button  type="primary" preIcon="ant-design:import-outlined" @click="onImportXls">导入</j-upload-button>
          <a-dropdown v-if="selectedRowKeys.length > 0">
              <template #overlay>
                <a-menu>
                  <a-menu-item key="1" @click="batchHandleDelete">
                    <Icon icon="ant-design:delete-outlined"></Icon>
                    删除
                  </a-menu-item>
                </a-menu>
              </template>
              <a-button>批量操作
                <Icon icon="mdi:chevron-down"></Icon>
              </a-button>
        </a-dropdown>
      </template>
       <!--操作栏-->
      <template #action="{ record }">
        <TableAction :actions="getTableAction(record)" :dropDownActions="getDropDownAction(record)"/>
      </template>
    </BasicTable>
    <a-tabs :defaultActiveKey="refKeys[0]" style="margin: 10px">
        <#list subTables as sub><#rt/>
          <a-tab-pane tab="${sub.ftlDescription}" :key="refKeys[${sub_index}]" :forceRender="true">
            <${sub.entityName}List></${sub.entityName}List>
          </a-tab-pane>
    	</#list>
    </a-tabs>

    <!-- 表单区域 -->
    <${entityName}Modal @register="registerModal" @success="handleSuccess"></${entityName}Modal>
  </div>
</template>

<script lang="ts" setup>
  import {ref, computed, unref,provide} from 'vue';
  import {BasicTable, useTable, TableAction} from '/@/components/Table';
<#list subTables as sub><#rt/>
  import ${sub.entityName}List from './${sub.entityName}List.vue'
</#list>
  import { useListPage } from '/@/hooks/system/useListPage'
  import {useModal} from '/@/components/Modal';
  import ${entityName}Modal from './modules/${entityName}Modal.vue'
  import {columns, searchFormSchema} from './${entityName}.data';
  import {list, deleteOne, batchDelete, getImportUrl,getExportUrl} from './${entityName}.api';

  const refKeys = ref([<#list subTables as sub>'${sub.entityName?uncap_first}', </#list>]);
  //注册model
  const [registerModal, {openModal}] = useModal();
   //注册table数据
  const { prefixCls,tableContext,onExportXls,onImportXls } = useListPage({
      tableProps:{
           title: '${tableVo.ftlDescription}',
           api: list,
           columns,
           canResize: false,
           rowSelection: {type: 'radio'},
           formConfig: {
                labelWidth: 120,
                schemas: searchFormSchema,
                autoSubmitOnEnter:true,
                showAdvancedButton:true,
            },
            actionColumn: {
               width: 120,
            },
        },
        exportConfig: {
            name:"${tableVo.ftlDescription}",
            url: getExportUrl,
        },
        importConfig: {
            url: getImportUrl
        },
    })

  const [registerTable, {reload},{ rowSelection, selectedRowKeys }] = tableContext

  const mainId = computed(() => (unref(selectedRowKeys).length > 0 ? unref(selectedRowKeys)[0] : ''));

  //下发 orderId,子组件接收
  provide('mainId', mainId);

   /**
    * 新增事件
    */
  function handleAdd() {
     openModal(true, {
       isUpdate: false,
       showFooter: true,
     });
  }
   /**
    * 编辑事件
    */
  function handleEdit(record: Recordable) {
     openModal(true, {
       record,
       isUpdate: true,
       showFooter: true,
     });
   }
   /**
    * 详情
   */
  function handleDetail(record: Recordable) {
     openModal(true, {
       record,
       isUpdate: true,
       showFooter: false,
     });
   }
   /**
    * 删除事件
    */
  async function handleDelete(record) {
     await deleteOne({id: record.id}, reload);
   }
   /**
    * 批量删除事件
    */
  async function batchHandleDelete() {
     await batchDelete({ids: selectedRowKeys.value}, reload);
   }
   /**
    * 成功回调
    */
  function handleSuccess() {
      reload();
   }
   /**
      * 操作栏
      */
  function getTableAction(record){
       return [
         {
           label: '编辑',
           onClick: handleEdit.bind(null, record),
         }
       ]
   }
     /**
        * 下拉操作栏
        */
  function getDropDownAction(record){
      return [
           {
             label: '详情',
             onClick: handleDetail.bind(null, record),
           }, {
             label: '删除',
             popConfirm: {
               title: '是否确认删除',
               confirm: handleDelete.bind(null, record),
             }
           }
      ]
   }
</script>

<style scoped>

</style>